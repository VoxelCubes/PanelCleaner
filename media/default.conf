[General]

# About this profile:
notes = The built-in default profile optimized for images between 1000 and 2000 pixels in height.

# Preferred file type to save the cleaned image as.
# If no file type is specified, the original file type will be used.
preferred_file_type =

# Preferred file type to save the mask as.
# Only image formats that allow for transparency are supported.
preferred_mask_file_type = .png


# The following are the lower and upper targets for the height of the input image.
# It is only ever scaled down to fit within the range, preferring whole number factors
# to minimize the impact on image quality. Images smaller than either target will remain unchanged.
# You can disable this feature by setting one or both values less than or equal to 0.

# This is useful for significantly speeding up processing on large images.
# Also, since other options relying on pixel dimensions depend on size, this will help
# normalize the results across different image sizes.

# The image will be scaled down, processed, and then only the mask is scaled back up.
# Meaning that the cleaned output will still use the original, unscaled image to prevent any loss in quality.
# Only the height of the image is used to determine the scale factor, preserving the aspect ratio,
# and ignoring the individual width of an image so that the factor remains consistent if one of
# the pages is a double page spread.

# E.g. for a lower target of 1000 and an upper target of 2000, an image with the size 5000x7000 (w, h) pixels
# will be scaled down by a factor of 4, so that it has the size 1250x1750 pixels during processing.
input_height_lower_target = 1000
input_height_upper_target = 3000



[TextDetector]

# Path to the text detection model, leave empty to use the built-in model.
# It is only recommended to override this if the version downloaded automatically
# is older than the latest release.
# The path must point directly to the comictextdetector.pt (CUDA) or
# comictextdetector.pt.onnx (CPU) file.
# You can download older versions of the model here:
# https://github.com/zyddnys/manga-image-translator/releases/latest
model_path =

# Number of models to run in parallel. This is useful if you have enough RAM
# (or VRAM with CUDA) to run multiple models at the same time.
# This, of course, will increase the speed of the process, but can also
# crash your computer if you overestimate your hardware.
# I recommend using 1 model per 2 GB of memory available, or 1 model per 50 images.
# Note: This is ignored if processing less than 50 files due to the overhead
# of starting multiple models not being worth it below that.
# Warning: This may cause program instability, use at your own risk.
concurrent_models = 1



[Preprocessor]

# Box sizes are given in the total number of pixels, so a box of 200x200 pixels has a size of 200 * 200 = 40000.
# To see these boxes visualized, use the --show-masks flag when cleaning and look inside the cache folder.

# Minimum size of any box to keep it.
box_min_size = 400

# Minimum size of a box with "unknown" language to keep it. This language is typically assigned to logos and other
# badly behaved text elements.
suspicious_box_min_size = 40000

# The minimum overlap between two boxes to merge them.
# This percentage (0-100) means how much of the smaller box must be inside the larger box to be merged.
# A higher value will require a larger overlap to merge the boxes.
box_overlap_threshold = 20.0

# Whether to use OCR to detect boxes that aren't worth cleaning, like ones that only contain numbers or symbols.
ocr_enabled = True

# Whether to use Tesseract to perform OCR tasks
# If set to True, Tesseract OCR can be used for text extraction, if available.
# If set to False, the built-in OCR model (manga-ocr) is always used.
ocr_use_tesseract = False

# Specifies which engine to use for performing OCR.
# - auto: Automatically selects the OCR engine based on the detected language of each text block within
#         the image. Uses manga-ocr for Japanese, and Tesseract for English or Unknown text.
# - mangaocr: Forces PanelCleaner to use the built-in manga-ocr model for all text extraction
#             tasks. Best suited for Japanese text.
# - tesseract: Forces PanelCleaner to use Tesseract OCR for all text extraction tasks. This is a
#              versatile option that supports multiple languages, including English.
ocr_engine = auto

# Defines the reading order for processing and sorting text boxes on the entire page, not
# individual text blocks. This global setting influences how text boxes are ordered and
# presented for further processing.
# - auto: Detects the reading order based on the detected language of each text block within
#         the page.
# - manga: Right-to-left, top-to-bottom order. Suitable for Japanese manga.
# - comic: Left-to-right, top-to-bottom order. Suitable for Western comics and texts.
# Choose based on the predominant layout of your content.
reading_order = auto

# Maximum size of a box to perform OCR on.
# These useless boxes are usually small, and OCR is slow, so use this as a cutoff.
ocr_max_size = 3000

# Regex pattern to match against OCR results.
# Anything matching this pattern is discarded.
# Note that the OCR model returns full-width characters, so this pattern should match them.
ocr_blacklist_pattern = [～．ー！？０-９]*

# The OCR model can only handle Japanese and English text, so when strict is enabled, it will discard boxes that it isn't
# confident are Japanese or English. Sometimes, numbers or other symbols will lower its confidence, resulting in the
# detected language being unknown. If strict is disabled, those will not be discarded. Anything that is
# confidently recognized as a different language will be discarded regardless of this setting.
ocr_strict_language = False

# Padding to add to each side of a box.
# This is added to the initial boxes created by the text detector AI.
# These boxes are visualized in green with the --cache-masks flag.
box_padding_initial = 2

# Padding to add to the right side of a box.
# This extension helps to cover rubytext that floats off to the right of vertical text.
box_right_padding_initial = 3

# Padding to add to each side of a box.
# This is added to an extended set of boxes, used to cut out false positives by the text detector AI's mask.
# These boxes are visualized in purple with the --cache-masks flag.
box_padding_extended = 5

# Padding to add to the right side of a box.
# This extension helps to cover rubytext that floats off to the right of vertical text.
box_right_padding_extended = 5

# Padding to add to each side of a box.
# This is added to the reference boxes used to sample the original image while analyzing what mask to use.
# These boxes are visualized in blue with the --cache-masks flag.
box_reference_padding = 20



[Masker]

# Number of pixels to grow the mask by each step.
# This bulks up the outline of the mask, so smaller values will be more accurate but slower.
mask_growth_step_pixels = 2

# Number of steps to grow the mask by.
# A higher number will make more and larger masks, ultimately limited by the reference box size.
mask_growth_steps = 11

# Minimum thickness of a mask.
# This is like the first mask's growth step, the remaining will follow mask_growth_step_pixels.
#
# This way, you can have a small step size for accuracy, but still prevent very thin masks
# that might be used to clean text only surrounded by an outline, when inpainting would've been the
# better choice.
min_mask_thickness = 4

# Maximum threshold for a pixel to be considered off-white.
# The median color along the edge of a mask may not be pure white,
# so to prevent slight off-white tones on a pure-white background,
# anything lighter than this threshold value will be rounded up to pure white.
off_white_max_threshold = 240

# The standard deviation of a mask represents the variation in color along the edge of the mask.
# For this, only the single line of pixels along the outer edge of a mask is sampled from
# the original image.
# A low deviation means that the mask sits in a solid color,
# which means it doesn't intersect any text or other objects.

# The maximum standard deviation of a mask to consider.
# A high value here means a higher tolerance for the mask intersecting text or other objects,
# which isn't a good mask, as it will require inpainting anyway.
# Setting this to 0 will only allow perfect masks, which is recommended for very high resolution images.
mask_max_standard_deviation = 15.0

# Minimum improvement in standard deviation of the mask to continue growing it.
# Setting a higher value here requires a higher improvement to consider a larger mask,
# to give a preference to smaller masks.
mask_improvement_threshold = 0.1

# Whether to use the fast mask selection algorithm.
# When true, the mask selection algorithm will pick the first perfect mask, if one is found early.
# This is faster, but may not find the best mask, if a slightly bigger one would have been better.
mask_selection_fast = False

# Color to use for the debug mask. This is a tuple of RGBA values.
debug_mask_color = 108,30,240,127



[Denoiser]

# When a bit of text is hard to mask off, the cleaning step likely had to choose a
# small mask, which leaves a lot of jpeg-artifacts behind, if they were around the text.

# This means that the color of pixels around the edge of a mask isn't uniform,
# which is quantified as a standard deviation. The denoiser can target masks with
# a minimum standard deviation and denoise the area right around the mask.
# This preserves details in the rest of the image, but removes artifacts right around where
# the text used to be.

# Since this is an optional step and may even be superfluous for high-resolution images that
# don't suffer from jpeg-artifacts, it can be disabled here.
# Set to False to disable denoising.
denoising_enabled = True

# The minimum standard deviation of colors around the edge of a given mask
# to perform denoising on the region around the mask.
noise_min_standard_deviation = 0.25

# Note: If inpainting is enabled, the inpainting min std deviation will act as a maximum for this,
# after which this mask is handed off to the inpainter.

# The thickness of an outline to denoise around a mask.
noise_outline_size = 5

# Fade the edges of the denoised cover mask by this amount to smoothly blend
# the denoised parts into the rest of the image.
noise_fade_radius = 1

# Set to True to support colored images.
colored_images = False

# How strongly to denoise the image. Higher values mean more denoising.
filter_strength = 10

# How strongly to denoise the color channels, as opposed to lightness.
# Higher values mean more denoising.
color_filter_strength = 10

# Size in pixels of the template patch that is used to compute weights. Should be odd.
template_window_size = 7

# Size in pixels of the window that is used to compute weighted average for given pixel. Should be odd.
search_window_size = 21



[Inpainter]

# EXPERIMENTAL FEATURE: If you find better default settings, please open an issue on github
# to share the improvements with everyone. Note that inpainting isn't enabled by default.

# Inpainting is when machine learning is used to replace the content of an image based on its surroundings.
# For masks that couldn't be cleaned well (or at all), inpainting can be used.
# To differentiate this from denoising, inpainting is meant for significantly worse masks that had
# a tight fit. Any masks that were denoised won't be inpainted.

# Since this step can provide poor results in some cases, it can be disabled here.
# Set to False to disable inpainting.
#
inpainting_enabled = False

# The minimum standard deviation of colors around the edge of a given mask
# to perform inpainting on the region around the mask.
inpainting_min_std_dev = 15.0

# The maximum radius of a mask to perform inpainting on.
# Masks larger than this will be left as they are, because if the margin is that big,
# it is likely that the mask is already good enough.
inpainting_max_mask_radius = 6

# The minimum radius around a mask to inpaint.
# This is added to the optimal mask size to ensure that the inpainting covers the entire mask.
min_inpainting_radius = 5

# For masks that proved far harder to clean, meaning they had a high standard deviation,
# increase the radius of the inpainting to cover more of the mask.
# This is additional margin is added to the min inpainting radius and is calculated as:
# inpainting radius multiplier times mask standard deviation
inpainting_radius_multiplier = 0.1

# The maximum radius around a mask to inpaint.
# This limits the size the inpainting can grow to, to prevent it from covering too much of the image,
# if a large radius multiplier is used.
max_inpainting_radius = 20

# After inpainting, cut the result out of the original image to prevent the inpaitning
# from affecting the rest of the image.
# This ensures that the original image is preserved as much as possible.
# This radius is added around the final inpainting radius, due to the inpainting model modifying a few pixels
# outside of its dedicated region.
inpainting_isolation_radius = 5

